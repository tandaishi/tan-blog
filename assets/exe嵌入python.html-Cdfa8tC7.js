import{_ as p,c as a,a as t,o}from"./app-DKI-Jotr.js";const n={};function i(s,e){return o(),a("div",null,[...e[0]||(e[0]=[t('<h1 id="exe嵌入python" tabindex="-1"><a class="header-anchor" href="#exe嵌入python"><span>exe嵌入python</span></a></h1><p>你想要将 main.exe 嵌入到 pack.py 中，然后用 PyInstaller 打包成一个独立的可执行文件（比如单个 .exe），在运行时能释放并调用这个嵌入的 main.exe。这是一个常见的“打包资源”需求。</p><p>下面是实现这一目标的完整方案：</p><p>✅ 目标 将 main.exe 作为二进制资源嵌入 Python 脚本中。 使用 PyInstaller 打包成单个 .exe 文件。 运行时自动释放 main.exe 到临时目录，并执行它。 不需要用户手动管理外部文件。</p><p>✅ 步骤一：修改 pack.py，支持从内嵌资源释放 exe</p><p>python pack.py</p><h1 id="import-osimport-sysimport-tempfileimport-atexitimport-subprocessfrom-pathlib-import-path" tabindex="-1"><a class="header-anchor" href="#import-osimport-sysimport-tempfileimport-atexitimport-subprocessfrom-pathlib-import-path"><span>import os import sys import tempfile import atexit import subprocess from pathlib import Path</span></a></h1><h1 id="内嵌-main-exe-的二进制数据-base64-编码更安全" tabindex="-1"><a class="header-anchor" href="#内嵌-main-exe-的二进制数据-base64-编码更安全"><span>内嵌 main.exe 的二进制数据（Base64 编码更安全）</span></a></h1><p>import base64 这里会存放 main.exe 的 base64 编码内容 EMBEDDED_EXE_DATA = b&quot;&quot;&quot; TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAWAAAAAAAAAAA4AAAAAAAAAAAAAAA ...（大量 base64 数据） &quot;&quot;&quot; 注意：这是占位符，你需要用真实数据替换</p><p>def extract_exe_to_temp(): &quot;&quot;&quot;将内嵌的 EXE 数据释放到临时文件&quot;&quot;&quot;</p><h1 id="创建临时文件-不自动删除-由我们控制生命周期" tabindex="-1"><a class="header-anchor" href="#创建临时文件-不自动删除-由我们控制生命周期"><span>创建临时文件，不自动删除，由我们控制生命周期</span></a></h1><p>temp_file = tempfile.NamedTemporaryFile(suffix=&#39;.exe&#39;, delete=False) temp_path = temp_file.name temp_file.close() # 关闭句柄以便后续写入</p><p>try:</p><h1 id="解码并写入-exe-文件" tabindex="-1"><a class="header-anchor" href="#解码并写入-exe-文件"><span>解码并写入 EXE 文件</span></a></h1><p>exe_data = base64.b64decode(EMBEDDED_EXE_DATA) with open(temp_path, &#39;wb&#39;) as f: f.write(exe_data) print(f&quot;已释放 main.exe 到: {temp_path}&quot;)</p><h1 id="注册退出时清理" tabindex="-1"><a class="header-anchor" href="#注册退出时清理"><span>注册退出时清理</span></a></h1><p>atexit.register(lambda: safe_remove(temp_path))</p><p>return temp_path</p><p>except Exception as e: print(f&quot;释放 main.exe 失败: {e}&quot;) safe_remove(temp_path) # 出错也尝试清理 return None</p><p>def safe_remove(path): &quot;&quot;&quot;安全删除临时文件&quot;&quot;&quot; try: if os.path.exists(path): os.unlink(path) except: pass</p><p>def run_embedded_exe(): &quot;&quot;&quot;主逻辑：释放并运行内嵌的 main.exe&quot;&quot;&quot; exe_path = extract_exe_to_temp() if not exe_path: print(&quot;无法释放 main.exe，程序退出。&quot;) sys.exit(1)</p><h1 id="执行-main-exe-等待其完成" tabindex="-1"><a class="header-anchor" href="#执行-main-exe-等待其完成"><span>执行 main.exe，等待其完成</span></a></h1><p>try: result = subprocess.run([exe_path], shell=False) sys.exit(result.returncode) except Exception as e: print(f&quot;执行 main.exe 时出错: {e}&quot;) sys.exit(1)</p><p>if <strong>name</strong> == &#39;<strong>main</strong>&#39;: run_embedded_exe()</p><p>✅ 步骤二：生成 main.exe 的 Base64 数据</p><p>创建一个脚本或命令来把你的 main.exe 转换成 base64 字符串，并插入到上面的 pack.py 中。 方法一：使用命令行（推荐）</p><p>bash Linux/macOS base64 -i main.exe -o main.exe.b64 Windows（PowerShell） [Convert]::ToBase64String([IO.File]::ReadAllBytes(&quot;main.exe&quot;)) Out-File -Encoding ASCII main.exe.b64</p><p>然后复制 main.exe.b64 的内容，替换 pack.py 中的 EMBEDDED_EXE_DATA。 方法二：用 Python 自动生成代码片段</p><p>python gen_code.py import base64</p><p>with open(&#39;main.exe&#39;, &#39;rb&#39;) as f: data = f.read()</p><p>b64_str = base64.b64encode(data).decode(&#39;ascii&#39;)</p><p>print(f&#39;EMBEDDED_EXE_DATA = b&quot;&quot;&quot;{b64_str}&quot;&quot;&quot;&#39;)</p><p>运行后输出类似：</p><p>EMBEDDED_EXE_DATA = b&quot;TVqQAAMAAAAEAAAA...&quot;</p><p>复制这行替换到 pack.py 即可。</p><p>✅ 步骤三：使用 PyInstaller 打包</p><p>确保你已经安装了 PyInstaller：</p><p>bash pip install pyinstaller</p><p>执行打包命令（单文件模式）：</p><p>bash pyinstaller --onefile pack.py ⚠️ 提示： 因为 main.exe 已经被编码进 pack.py，所以不需要再通过 --add-data 添加它。 打包过程可能会比较慢，因为整个 main.exe 被当作字符串包含在代码中。</p><p>✅ 可选优化建议</p><ol><li>压缩数据（可选） 如果 main.exe 很大，可以先压缩再编码，运行时解压：</li></ol><p>python import zlib compressed_data = zlib.compress(exe_data) 存储 compressed_data 的 base64 读取时：zlib.decompress(base64.b64decode(...))</p><ol start="2"><li><p>避免被杀毒软件误报 某些杀软会对“Python 程序释放 exe”行为敏感。 可尝试加壳、签名，或使用其他打包方式（如 NSIS + 自解压）。</p></li><li><p>隐藏控制台（如果是 GUI 程序）</p></li></ol><p>bash pyinstaller --onefile --windowed pack.py</p><p>✅ 最终效果 输出一个 dist/pack.exe 运行 pack.exe 时： 自动释放 main.exe 到 %TEMP% 目录 执行 main.exe 退出时自动清理临时文件</p><p>❗注意事项 EMBEDDED_EXE_DATA 是纯文本，会使 pack.py 文件变得非常大（和 main.exe 大小相当）。 如果 main.exe 经常更新，每次都要重新生成 pack.py，不太方便。此时可考虑用构建脚本自动化。 某些反病毒软件可能对“内存/临时释放 exe”的行为发出警告。</p><p>如果你希望我帮你写一个完整的自动化打包脚本（自动读取 main.exe 并生成最终的 pack.py），也可以告诉我。</p>',48)])])}const m=p(n,[["render",i]]),x=JSON.parse('{"path":"/posts/exe%E5%B5%8C%E5%85%A5python.html","title":"exe嵌入python","lang":"zh-CN","frontmatter":{"date":"2025-10-22T00:00:00.000Z","category":["编程"],"tag":["编程"],"archive":true},"headers":[],"git":{"updatedTime":1761118499000,"contributors":[{"name":"tan","username":"tan","email":"1144375711@qq.com","commits":1,"url":"https://github.com/tan"}],"changelog":[{"hash":"cdca4c41f0804d0d182b20cfc1634a9e67163417","time":1761118499000,"email":"1144375711@qq.com","author":"tan","message":"exe嵌入python"}]},"filePathRelative":"posts/exe嵌入python.md","excerpt":"\\n<p>你想要将 main.exe 嵌入到 pack.py 中，然后用 PyInstaller 打包成一个独立的可执行文件（比如单个 .exe），在运行时能释放并调用这个嵌入的 main.exe。这是一个常见的“打包资源”需求。</p>\\n<p>下面是实现这一目标的完整方案：</p>\\n<p>✅ 目标\\n将 main.exe 作为二进制资源嵌入 Python 脚本中。\\n使用 PyInstaller 打包成单个 .exe 文件。\\n运行时自动释放 main.exe 到临时目录，并执行它。\\n不需要用户手动管理外部文件。</p>\\n<p>✅ 步骤一：修改 pack.py，支持从内嵌资源释放 exe</p>\\n<p>python\\npack.py</p>"}');export{m as comp,x as data};
