import{_ as s,c as a,a as e,o as p}from"./app-D2XpfyMI.js";const t="/assets/%E7%9B%AE%E5%BD%95%E5%8F%82%E8%80%83-CVr-Ril5.png",l={};function i(c,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># pack.py</span></span>
<span class="line"><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> run</span>
<span class="line"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys<span class="token punctuation">,</span>shlex</span>
<span class="line">BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">cmd <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">&#39;main.exe&#39;</span><span class="token punctuation">)</span></span>
<span class="line">run<span class="token punctuation">(</span>shlex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-autohotkey line-numbers-mode" data-highlighter="prismjs" data-ext="autohotkey"><pre><code><span class="line"><span class="token comment">; main.ahk</span></span>
<span class="line"><span class="token directive important">#SingleInstance</span> Force</span>
<span class="line"><span class="token command selector">MsgBox</span><span class="token punctuation">(</span>&#39;hello&#39;<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="目录结构参考"></p><p>我们要做的事情就是要把，用ahk编译出来的<code>main.exe</code> ，嵌入到 <code>pack.py</code> 中，运行 <code>pack.py</code> 的时候就运行 <code>main.exe</code> 最后把 <code>pack.py</code> 给打包成 exe 就好了</p><blockquote><p>以下是通义给的答案</p></blockquote><p>你想要将 <code>main.exe</code> 嵌入到 <code>pack.py</code> 中，然后用 PyInstaller 打包成一个独立的可执行文件（比如单个 <code>.exe</code>），在运行时能释放并调用这个嵌入的 <code>main.exe</code>。这是一个常见的“打包资源”需求。</p><p>下面是实现这一目标的完整方案：</p><hr><h3 id="✅-目标" tabindex="-1"><a class="header-anchor" href="#✅-目标"><span>✅ 目标</span></a></h3><ul><li>将 <code>main.exe</code> 作为<strong>二进制资源</strong>嵌入 Python 脚本中。</li><li>使用 PyInstaller 打包成单个 <code>.exe</code> 文件。</li><li>运行时自动释放 <code>main.exe</code> 到临时目录，并执行它。</li><li>不需要用户手动管理外部文件。</li></ul><hr><h3 id="✅-步骤一-修改-pack-py-支持从内嵌资源释放-exe" tabindex="-1"><a class="header-anchor" href="#✅-步骤一-修改-pack-py-支持从内嵌资源释放-exe"><span>✅ 步骤一：修改 <code>pack.py</code>，支持从内嵌资源释放 exe</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># pack.py</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> sys</span>
<span class="line"><span class="token keyword">import</span> tempfile</span>
<span class="line"><span class="token keyword">import</span> atexit</span>
<span class="line"><span class="token keyword">import</span> subprocess</span>
<span class="line"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path</span>
<span class="line"></span>
<span class="line"><span class="token comment"># ==============================</span></span>
<span class="line"><span class="token comment"># 内嵌 main.exe 的二进制数据（Base64 编码更安全）</span></span>
<span class="line"><span class="token comment"># ==============================</span></span>
<span class="line"><span class="token keyword">import</span> base64</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 这里会存放 main.exe 的 base64 编码内容</span></span>
<span class="line">EMBEDDED_EXE_DATA <span class="token operator">=</span> <span class="token triple-quoted-string string">b&quot;&quot;&quot;</span>
<span class="line">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAWAAAAAAAAAAA4AAAAAAAAAAAAAAA</span>
<span class="line">...（大量 base64 数据）</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"><span class="token comment"># 注意：这是占位符，你需要用真实数据替换</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">extract_exe_to_temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;将内嵌的 EXE 数据释放到临时文件&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 创建临时文件，不自动删除，由我们控制生命周期</span></span>
<span class="line">    temp_file <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span>suffix<span class="token operator">=</span><span class="token string">&#39;.exe&#39;</span><span class="token punctuation">,</span> delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">    temp_path <span class="token operator">=</span> temp_file<span class="token punctuation">.</span>name</span>
<span class="line">    temp_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭句柄以便后续写入</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 解码并写入 EXE 文件</span></span>
<span class="line">        exe_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>EMBEDDED_EXE_DATA<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>exe_data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;已释放 main.exe 到: </span><span class="token interpolation"><span class="token punctuation">{</span>temp_path<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 注册退出时清理</span></span>
<span class="line">        atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> safe_remove<span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> temp_path</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;释放 main.exe 失败: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        safe_remove<span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span>  <span class="token comment"># 出错也尝试清理</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">safe_remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;安全删除临时文件&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            os<span class="token punctuation">.</span>unlink<span class="token punctuation">(</span>path<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">except</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">run_embedded_exe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;主逻辑：释放并运行内嵌的 main.exe&quot;&quot;&quot;</span></span>
<span class="line">    exe_path <span class="token operator">=</span> extract_exe_to_temp<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> exe_path<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;无法释放 main.exe，程序退出。&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 执行 main.exe，等待其完成</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>exe_path<span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>result<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;执行 main.exe 时出错: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    run_embedded_exe<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✅-步骤二-生成-main-exe-的-base64-数据" tabindex="-1"><a class="header-anchor" href="#✅-步骤二-生成-main-exe-的-base64-数据"><span>✅ 步骤二：生成 <code>main.exe</code> 的 Base64 数据</span></a></h3><p>创建一个脚本或命令来把你的 <code>main.exe</code> 转换成 base64 字符串，并插入到上面的 <code>pack.py</code> 中。</p><h4 id="方法一-使用命令行-推荐" tabindex="-1"><a class="header-anchor" href="#方法一-使用命令行-推荐"><span>方法一：使用命令行（推荐）</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Linux/macOS</span></span>
<span class="line">base64 <span class="token parameter variable">-i</span> main.exe <span class="token parameter variable">-o</span> main.exe.b64</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Windows（PowerShell）</span></span>
<span class="line"><span class="token punctuation">[</span>Convert<span class="token punctuation">]</span>::ToBase64String<span class="token punctuation">(</span><span class="token punctuation">[</span>IO.File<span class="token punctuation">]</span>::ReadAllBytes<span class="token punctuation">(</span><span class="token string">&quot;main.exe&quot;</span><span class="token punctuation">))</span> <span class="token operator">|</span> Out-File <span class="token parameter variable">-Encoding</span> ASCII main.exe.b64</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后复制 <code>main.exe.b64</code> 的内容，替换 <code>pack.py</code> 中的 <code>EMBEDDED_EXE_DATA</code>。</p><h4 id="方法二-用-python-自动生成代码片段" tabindex="-1"><a class="header-anchor" href="#方法二-用-python-自动生成代码片段"><span>方法二：用 Python 自动生成代码片段</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># gen_code.py</span></span>
<span class="line"><span class="token keyword">import</span> base64</span>
<span class="line"></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;main.exe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">b64_str <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;EMBEDDED_EXE_DATA = b&quot;&quot;&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>b64_str<span class="token punctuation">}</span></span><span class="token string">&quot;&quot;&quot;&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后输出类似：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">EMBEDDED_EXE_DATA = b&quot;TVqQAAMAAAAEAAAA...&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>复制这行替换到 <code>pack.py</code> 即可。</p><hr><h3 id="✅-步骤三-使用-pyinstaller-打包" tabindex="-1"><a class="header-anchor" href="#✅-步骤三-使用-pyinstaller-打包"><span>✅ 步骤三：使用 PyInstaller 打包</span></a></h3><p>确保你已经安装了 PyInstaller：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> pyinstaller</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行打包命令（<strong>单文件模式</strong>）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pyinstaller <span class="token parameter variable">--onefile</span> pack.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>⚠️ 提示：</p><ul><li>因为 <code>main.exe</code> 已经被编码进 <code>pack.py</code>，所以不需要再通过 <code>--add-data</code> 添加它。</li><li>打包过程可能会比较慢，因为整个 <code>main.exe</code> 被当作字符串包含在代码中。</li></ul></blockquote><hr><h3 id="✅-可选优化建议" tabindex="-1"><a class="header-anchor" href="#✅-可选优化建议"><span>✅ 可选优化建议</span></a></h3><ol><li><p><strong>压缩数据（可选）</strong> 如果 <code>main.exe</code> 很大，可以先压缩再编码，运行时解压：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> zlib</span>
<span class="line">compressed_data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>exe_data<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 存储 compressed_data 的 base64</span></span>
<span class="line"><span class="token comment"># 读取时：zlib.decompress(base64.b64decode(...))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>避免被杀毒软件误报</strong></p><ul><li>某些杀软会对“Python 程序释放 exe”行为敏感。</li><li>可尝试加壳、签名，或使用其他打包方式（如 NSIS + 自解压）。</li></ul></li><li><p><strong>隐藏控制台（如果是 GUI 程序）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pyinstaller <span class="token parameter variable">--onefile</span> <span class="token parameter variable">--windowed</span> pack.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h3 id="✅-最终效果" tabindex="-1"><a class="header-anchor" href="#✅-最终效果"><span>✅ 最终效果</span></a></h3><ul><li>输出一个 <code>dist/pack.exe</code></li><li>运行 <code>pack.exe</code> 时： <ul><li>自动释放 <code>main.exe</code> 到 <code>%TEMP%</code> 目录</li><li>执行 <code>main.exe</code></li><li>退出时自动清理临时文件</li></ul></li></ul><hr><h3 id="❗注意事项" tabindex="-1"><a class="header-anchor" href="#❗注意事项"><span>❗注意事项</span></a></h3><ul><li><code>EMBEDDED_EXE_DATA</code> 是纯文本，会使 <code>pack.py</code> 文件变得非常大（和 <code>main.exe</code> 大小相当）。</li><li>如果 <code>main.exe</code> 经常更新，每次都要重新生成 <code>pack.py</code>，不太方便。此时可考虑用构建脚本自动化。</li><li>某些反病毒软件可能对“内存/临时释放 exe”的行为发出警告。</li></ul><hr>`,41)])])}const u=s(l,[["render",i]]),d=JSON.parse(`{"path":"/posts/exe%E5%B5%8C%E5%85%A5python.html","title":"","lang":"zh-CN","frontmatter":{"date":"2025-10-22T00:00:00.000Z","category":["编程"],"tag":["编程"],"archive":false},"headers":[{"level":3,"title":"✅ 目标","slug":"✅-目标","link":"#✅-目标","children":[]},{"level":3,"title":"✅ 步骤一：修改 pack.py，支持从内嵌资源释放 exe","slug":"✅-步骤一-修改-pack-py-支持从内嵌资源释放-exe","link":"#✅-步骤一-修改-pack-py-支持从内嵌资源释放-exe","children":[]},{"level":3,"title":"✅ 步骤二：生成 main.exe 的 Base64 数据","slug":"✅-步骤二-生成-main-exe-的-base64-数据","link":"#✅-步骤二-生成-main-exe-的-base64-数据","children":[]},{"level":3,"title":"✅ 步骤三：使用 PyInstaller 打包","slug":"✅-步骤三-使用-pyinstaller-打包","link":"#✅-步骤三-使用-pyinstaller-打包","children":[]},{"level":3,"title":"✅ 可选优化建议","slug":"✅-可选优化建议","link":"#✅-可选优化建议","children":[]},{"level":3,"title":"✅ 最终效果","slug":"✅-最终效果","link":"#✅-最终效果","children":[]},{"level":3,"title":"❗注意事项","slug":"❗注意事项","link":"#❗注意事项","children":[]}],"git":{"updatedTime":1761120202000,"contributors":[{"name":"tan","username":"tan","email":"1144375711@qq.com","commits":3,"url":"https://github.com/tan"}],"changelog":[{"hash":"eba04e476ce07463d00822e88d63f1cacd251f51","time":1761120202000,"email":"1144375711@qq.com","author":"tan","message":"exe嵌入python"},{"hash":"fcb53f3fb29b1adaf6da9a3a11c5e8a2ee9d11b3","time":1761119495000,"email":"1144375711@qq.com","author":"tan","message":"exe嵌入python"},{"hash":"cdca4c41f0804d0d182b20cfc1634a9e67163417","time":1761118499000,"email":"1144375711@qq.com","author":"tan","message":"exe嵌入python"}]},"filePathRelative":"posts/exe嵌入python.md","excerpt":"<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"py\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\"># pack.py</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">from</span> subprocess <span class=\\"token keyword\\">import</span> run</span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">import</span> os<span class=\\"token punctuation\\">,</span>sys<span class=\\"token punctuation\\">,</span>shlex</span>\\n<span class=\\"line\\">BASE_DIR <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>dirname<span class=\\"token punctuation\\">(</span>os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>realpath<span class=\\"token punctuation\\">(</span>sys<span class=\\"token punctuation\\">.</span>argv<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">cmd <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>join<span class=\\"token punctuation\\">(</span>BASE_DIR<span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'main.exe'</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">run<span class=\\"token punctuation\\">(</span>shlex<span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span>cmd<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{u as comp,d as data};
